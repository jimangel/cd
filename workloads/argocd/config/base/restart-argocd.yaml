apiVersion: v1
kind: ServiceAccount
metadata:
  name: argocd-bouncer
  namespace: argocd
---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  name: kubectl-pod-role
  namespace: argocd
rules:
- apiGroups: ["apps"]
  resources: ["deployments"]
  resourceNames: ["argocd-applicationset-controller", "argocd-notifications-controller", "argocd-redis", "argocd-repo-server", "argocd-server", "argocd-dex-server"]
  verbs: ["get", "patch"]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: kubectl-pod-rb
  namespace: argocd
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: Role
  name: kubectl-pod-role
subjects:
- kind: ServiceAccount
  name: argocd-bouncer
  namespace: argocd
---
kind: Job
apiVersion: batch/v1
metadata:
  # using a named job so it can be triggered / deleted ("beforehookcreation") each time. Alternatively generate name could work.
  name: argocd-bouncer
  namespace: argocd
  annotations:
    argocd.argoproj.io/hook: PostSync
    argocd.argoproj.io/hook-delete-policy: BeforeHookCreation
spec:
  backoffLimit: 1
  template:
    spec:
      serviceAccountName: argocd-bouncer
      restartPolicy: OnFailure
      containers:
        - name: argocd-bouncer
          image: registry.k8s.io/kubectl:v1.28.3
          resources:
            requests:
              cpu: 100m
              memory: 50Mi
            limits:
              memory: 50Mi
          args:
            - rollout
            - restart
            - deployment
            - argocd-applicationset-controller
            - argocd-notifications-controller
            - argocd-redis
            - argocd-repo-server
            - argocd-server
            - argocd-dex-server
          securityContext:
            runAsUser: 65534
            runAsNonRoot: true
            readOnlyRootFilesystem: true